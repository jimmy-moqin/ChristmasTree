import pickle
import random
import time
import turtle as t

# 全局设置
W = 650 # 画布宽度
H = 976 # 画布高度
# 2560 和 1440 是屏幕分辨率，可以根据自己的屏幕分辨率修改
startx = (2560 - W) // 2 # 画布起始x坐标
starty = (1440 - H) // 2 # 画布起始y坐标
t.speed(0)
t.setup(W, H, startx=startx, starty=starty)
t.hideturtle() # 隐藏画笔
t.bgcolor("#061F3E") # 背景颜色

time.sleep(10)

def D(x, y):
    '''坐标转换'''
    return (-W // 2) + x, (H // 2) - y


def hangball(x, y, h, r):
    '''绘制顶部纵向挂球'''
    t.color("#F4CE3D", "#F4CE3D")
    t.penup()
    t.goto(D(x, y - h - r))
    t.pendown()
    t.pensize(3)
    t.seth(-90)
    t.fd(h)
    t.seth(180)
    t.begin_fill()
    t.circle(r)
    t.end_fill()
    t.penup()
    t.goto(D(x - 0.35 * r, y - 0.35 * r))
    t.pendown()
    t.dot(0.8 * r, "#FAF6D9")
    t.penup()
    t.goto(D(x + 0.35 * r, y + 0.35 * r))
    t.pendown()
    t.dot(0.4 * r, "#FAF6D9")
    t.penup()
    t.goto(D(x, y - r))
    t.pendown()
    t.dot(0.4 * r, "#FAF6D9")


def snow(x, y, r, size=1):
    '''绘制雪花'''
    t.color("#FFFBF7", "#FFFBF7")
    t.pensize(size)
    for i in range(4):
        t.penup()
        t.goto(D(x, y))
        t.pendown()
        t.seth(i * 90)
        for _ in range(2):
            t.fd(0.3 * r)
            t.lt(45)
            t.fd(0.21 * r)
            t.bk(0.21 * r)
            t.rt(90)
            t.fd(0.21 * r)
            t.bk(0.21 * r)
            t.lt(45)
        t.fd(0.3 * r)

    for i in range(4):
        t.penup()
        t.goto(D(x, y))
        t.pendown()
        t.seth(i * 90 + 45)
        t.fd(0.6 * r)
        t.lt(45)
        t.fd(0.21 * r)
        t.bk(0.21 * r)
        t.rt(90)
        t.fd(0.21 * r)
        t.bk(0.21 * r)
        t.lt(45)
        t.fd(0.3 * r)


def hexagram(x, y, r1, r2, size, color):
    '''绘制六芒星'''
    t.penup()
    t.goto(D(x, y))
    t.seth(90)
    t.fd(r1)
    t.pendown()
    t.begin_fill()
    t.color(color, color)
    for _ in range(6):
        t.lt(150)
        t.fd(r1 * 3**0.5 / 3)
        t.rt(60)
        t.fd(r1 * 3**0.5 / 3)
        t.rt(30)
    t.end_fill()

    for i in range(6):
        t.pensize(size)
        t.penup()
        t.goto(D(x, y))
        t.seth(60 * i + 90)
        t.fd(r1)
        t.pendown()
        t.lt(60)
        t.fd(r2 * 3**0.5 / 4)
        t.bk(r2 / 2 * 3**0.5 / 4)
        t.lt(60)
        t.fd(r2 / 4 * 3**0.5 / 3)
        t.bk(r2 / 4 * 3**0.5 / 3)
        t.rt(60)
        t.bk(r2 / 2 * 3**0.5 / 4)

        t.rt(120)

        t.fd(r2 * 3**0.5 / 4)
        t.bk(r2 / 2 * 3**0.5 / 4)
        t.rt(60)
        t.fd(r2 / 4 * 3**0.5 / 3)
        t.bk(r2 / 4 * 3**0.5 / 3)
        t.lt(60)
        t.bk(r2 / 2 * 3**0.5 / 4)
        t.lt(60)

        t.fd(0.30 * r2)

        t.lt(50)
        t.fd(r2 * 3**0.5 / 8)
        t.bk(r2 * 3**0.5 / 8)
        t.rt(100)
        t.fd(r2 * 3**0.5 / 8)
        t.bk(r2 * 3**0.5 / 8)
        t.lt(50)

        t.fd(0.25 * r2)

        t.lt(50)
        t.fd(r2 * 3**0.5 / 6)
        t.bk(r2 * 3**0.5 / 6)
        t.rt(100)
        t.fd(r2 * 3**0.5 / 6)
        t.bk(r2 * 3**0.5 / 6)
        t.lt(50)

        t.fd(0.25 * r2)

        t.lt(50)
        t.fd(r2 * 3**0.5 / 10)
        t.bk(r2 * 3**0.5 / 10)
        t.rt(100)
        t.fd(r2 * 3**0.5 / 10)
        t.bk(r2 * 3**0.5 / 10)
        t.lt(50)

        t.fd(0.20 * r2)


def flash(x, y, r, size=1):
    '''绘制高光'''
    t.penup()
    t.goto(D(x, y))
    t.pendown()
    t.pensize(size)
    t.color("#FFFBF7", "#FFFBF7")
    t.dot(0.2*r)
    for i in range(4):
        t.seth(0 + i * 90)
        t.pensize(4*size)
        t.fd(1 * r)
        t.pensize(3*size)
        t.fd(1.5 * r)
        t.pensize(2*size)
        t.fd(2 * r)
        t.pensize(1*size)
        t.fd(2 * r)
        t.goto(D(x, y))
    
    for i in range(4):
        t.seth(45 + i * 90)
        t.pensize(3*size)
        t.fd(1 * r)
        t.pensize(2*size)
        t.fd(1.5 * r)
        t.pensize(1*size)
        t.fd(2 * r)
        t.goto(D(x, y))

    for i in range(4):
        t.seth(22.5 + i * 90)
        t.pensize(2*size)
        t.fd(1 * r)
        t.pensize(1*size)
        t.fd(2 * r)
        t.goto(D(x, y))

    for i in range(4):
        t.seth(67.5 + i * 90)
        t.pensize(2*size)
        t.fd(1 * r)
        t.pensize(1*size)
        t.fd(2 * r)
        t.goto(D(x, y))
        
# 以下为各个图形的坐标
hangballList = [(28,43,30,13), (76,75,60,15), (123,43,30,13), (542,75,60,15), (577,136,116,20), 
                (620,64,50,13)
]

snowList = [(89, 341, 28, 2), (24, 365, 8, 1), (560, 315, 28, 2), (618, 420, 11, 1)]

starList = [(324, 304),(327, 344),(303, 412),(359, 397),(272, 489),(360, 478),
            (230, 562),(328, 534),(391, 556),(332, 589),(240, 632),(325, 655),
            (405, 664),(173, 681),(298, 681),(466, 735),(388, 747),(280, 739),
            (234, 772),(137, 780),(253, 809),(339, 797),(430, 812),(506, 778),
            (500, 838),(534, 915),(403, 917),(311, 868),(238, 915),(84, 916),
            (103, 839),(161, 955),(315, 956),(459, 952),(594, 956),(183, 839),
            (187, 730),(14, 964),(330, 698),
        ]

dotList = [
    (319, 275),(343, 274),(364, 295),(355, 305),(333, 298),(340, 311),
    (420, 302),(361, 317),(388, 303),(410, 335),(400, 347),(378, 346),
    (365, 341),(361, 325),(376, 333),(348, 326),(358, 344),(369, 343),
    (366, 352),(386, 358),(375, 364),(369, 372),(383, 373),(378, 387),
    (390, 386),(397, 377),(396, 367),(411, 367),(401, 388),(396, 397),
    (395, 407),(385, 400),(410, 387),(428, 395),(415, 403),(406, 419),
    (417, 420),(427, 406),(422, 433),(429, 435),(426, 445),(441, 428),
    (451, 430),(466, 419),(470, 446),(456, 412),(454, 387),(445, 443),
    (440, 458),(446, 461),(449, 447),(460, 453),(471, 461),(469, 483),
    (463, 492),(448, 488),(452, 477),(441, 465),(425, 459),(431, 471),
    (435, 479),(427, 482),(423, 470),(420, 466),(412, 457),(404, 460),
    (416, 480),(417, 500),(425, 496),(438, 485),(437, 497),(456, 506),
    (460, 512),(445, 518),(474, 508),(486, 494),(494, 501),(478, 525),
    (470, 532),(460, 530),(457, 533),(466, 546),(457, 546),(449, 540),
    (444, 537),(440, 550),(430, 532),(431, 543),(436, 558),(446, 565),
    (444, 562),(451, 553),(458, 560),(468, 559),(477, 553),(459, 563),
    (454, 573),(464, 577),(466, 588),(473, 580),(471, 597),(474, 603),
    (484, 598),(474, 589),(489, 566),(510, 554),(515, 565),(517, 574),
    (494, 539),(498, 600),(498, 605),(504, 614),(496, 616),(488, 614),
    (494, 625),(505, 631),(515, 631),(532, 633),(552, 637),(512, 649),
    (503, 641),(494, 645),(492, 651),(482, 648),(479, 657),(473, 657),
    (477, 663),(501, 668),(484, 675),(495, 693),(506, 688),(501, 684),
    (518, 682),(528, 677),(531, 696),(535, 709),(514, 702),(506, 698),
    (529, 714),(521, 725),(537, 738),(537, 727),(549, 719),(562, 726),
    (569, 722),(558, 708),(567, 698),(561, 688),(547, 694),(543, 675),
    (545, 654),(562, 662),(564, 650),(597, 730),(591, 716),(595, 707),
    (618, 715),(581, 732),(574, 735),(562, 744),(551, 745),(557, 748),
    (575, 756),(587, 754),(594, 758),(597, 761),(595, 773),(605, 788),
    (610, 791),(614, 791),(619, 792),(625, 800),(623, 785),(620, 769),
    (613, 769),(628, 760),(628, 756),(581, 739),(304, 302),(290, 314),
    (282, 306),(274, 299),(284, 326),(275, 324),(274, 316),(280, 338),
    (264, 333),(263, 347),(276, 347),(264, 349),(267, 380),(266, 374),
    (260, 366),(252, 387),(245, 374),(248, 355),(241, 365),(237, 374),
    (240, 387),(245, 398),(241, 405),(236, 397),(231, 388),(224, 387),
    (224, 403),(229, 417),(216, 417),(207, 407),(202, 395),(194, 390),
    (183, 386),(166, 417),(179, 413),(181, 430),(186, 424),(190, 432),
    (202, 433),(208, 444),(207, 459),(189, 446),(163, 442),(168, 453),
    (163, 461),(182, 447),(183, 461),(194, 469),(202, 468),(210, 472),
    (222, 479),(206, 481),(200, 477),(199, 490),(210, 494),(197, 501),
    (174, 491),(168, 484),(187, 486),(185, 477),(177, 506),(177, 512),
    (188, 517),(151, 493),(139, 500),(159, 528),(164, 536),(170, 529),
    (175, 534),(191, 545),(207, 535),(202, 541),(190, 532),(185, 540),
    (174, 545),(170, 546),(165, 559),(154, 555),(180, 570),(181, 575),
    (162, 575),(165, 588),(139, 573),(138, 580),(148, 601),(135, 600),
    (137, 610),(144, 615),(139, 616),(138, 624),(132, 631),(132, 641),
    (125, 649),(123, 652),(143, 653),(152, 646),(165, 643),(156, 658),
    (142, 661),(138, 672),(118, 664),(105, 676),(113, 684),(121, 690),
    (132, 690),(141, 686),(149, 675),(131, 699),(122, 699),(115, 702),
    (105, 703),(95, 689),(86, 696),(80, 693),(72, 685),(68, 699),
    (77, 710),(88, 726),(96, 729),(105, 726),(114, 720),(120, 720),
    (98, 731),(87, 732),(71, 724),(38, 727),(35, 727),(29, 732),
    (52, 743),(67, 748),(61, 738),(54, 735),(45, 733),(34, 746),
    (17, 722),(50, 737),(62, 751),(60, 756),(37, 759),(23, 760),
    (12, 761),(11, 777),(21, 783),(43, 783),(39, 775),(23, 786),
    (14, 793),(4, 804),(1, 810),(107, 636),(87, 635),(78, 641),
    (76, 659),(82, 670),(91, 649),(116, 620),(122, 607),(98, 599),
    (111, 589),(120, 586),(130, 580),(121, 555),(142, 537),(120, 557),
    (117, 564),(120, 572),(129, 543),(140, 532),(132, 511),(149, 494),
    (234, 345),(244, 302),(372, 278),(44, 768),(52, 752),(64, 733),
    (94, 724),(114, 705),(594, 734),(604, 734),(607, 771),
]

flashList = [(360, 413),(329, 463),(287, 489),(246, 515),(279, 567),(320, 594),
            (383, 623),(445, 610),(459, 636),(443, 681),(405, 713),(370, 733),
            (291, 761),(239, 776),(166, 773),(137, 740),(94, 791),(119, 840),
            (172, 879),(242, 910),(307, 925),(352, 936),(388, 944),(467, 948),
            (557, 949),(594, 949),
        ]       

# 绘制挂球
for i in hangballList:
    hangball(i[0], i[1], i[2], i[3])

# 绘制雪花
for i in snowList:
    snow(i[0], i[1], i[2], i[3])

# 绘制树主体的六芒星
for i in starList:
    r1 = random.randint(20, 30)
    r2 = 1.2 * r1
    hexagram(i[0], i[1], r1, r2, 2, '#D1A439')

# 绘制树主体周围的彩点
for i in dotList:
    r = random.randint(5,15)
    t.penup()
    c = random.choice(['#EADE9C', '#CBD0DD', "#C4A34D","#374B65"])
    t.goto(D(i[0], i[1]))
    t.pendown()
    t.dot(r, c)

# 绘制高光
for i in flashList:
    r = random.randint(3,7)
    flash(i[0], i[1], r)

# 绘制伯利恒之星
snow(330,237,30,3)

t.tracer(False) # 不显示绘制过程

# 绘制文字以及底部装饰
mark = pickle.load(open('mark.pkl', 'rb'))
for i in mark:
    t.penup()
    t.goto(D(i[0], i[1]))
    t.pendown()
    t.color("white")
    t.dot(2)



t.done()
